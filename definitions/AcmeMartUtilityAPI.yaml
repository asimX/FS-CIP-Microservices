paths:
  '/Utilities/{container}/upload':
    post:
      tags:
        - Utility
      operationId: Utility.upload
      parameters:
        - name: container
          in: path
          required: true
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              result:
                type: object
      deprecated: false
  /Utilities/version/client:
    get:
      tags:
        - Utility
      operationId: Utility.clientVersion
      parameters: []
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              version:
                type: object
      deprecated: false
  /Utilities/version/server:
    get:
      tags:
        - Utility
      operationId: Utility.serverVersion
      parameters: []
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              version:
                type: object
      deprecated: false
  /Utilities/static/coach:
    get:
      tags:
        - Utility
      operationId: Utility.coachText
      parameters:
        - name: name
          in: query
          description: Coach Screen Name
          required: true
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /Utilities/static/config:
    get:
      tags:
        - Utility
      operationId: Utility.configText
      parameters:
        - name: name
          in: query
          description: Config Slot Name
          required: true
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /Utilities/ping:
    get:
      tags:
        - Utility
      operationId: Utility.ping
      parameters: []
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  '/Events/{id}/exists':
    get:
      tags:
        - Event
      summary: Check whether a model instance exists in the data source.
      operationId: 'Event.exists__get_Events_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Events/{id}':
    head:
      tags:
        - Event
      summary: Check whether a model instance exists in the data source.
      operationId: 'Event.exists__head_Events_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Event
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Event.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Event'
      deprecated: false
  /Events:
    get:
      tags:
        - Event
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Event.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Event'
      deprecated: false
  /Events/findOne:
    get:
      tags:
        - Event
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Event.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Event'
      deprecated: false
  /Events/count:
    get:
      tags:
        - Event
      summary: Count instances of the model matched by where from the data source.
      operationId: Event.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Sneakers/identify:
    get:
      tags:
        - Sneaker
      operationId: Sneaker.identify
      parameters:
        - name: key
          in: query
          required: false
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              identification:
                type: object
      deprecated: false
definitions:
  x-any:
    properties: {}
  Event:
    properties:
      id:
        type: string
    additionalProperties: false
basePath: /api
swagger: '2.0'
info:
  x-ibm-name: acmemartutilityapi
  version: 1.0.0
  title: AcmeMartUtilityAPI
schemes:
  - https
host: $(catalog.host)
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  clientIdHeader:
    type: apiKey
    in: header
    name: X-IBM-Client-Id
  clientSecretHeader:
    in: header
    name: X-IBM-Client-Secret
    type: apiKey
security:
  - clientIdHeader: []
    clientSecretHeader: []
x-ibm-configuration:
  testable: true
  enforced: true
  cors:
    enabled: true
  catalogs:
    apic-dev:
      properties:
        runtime-url: $(TARGET_URL)
    sb:
      properties:
        runtime-url: 'http://localhost:4001'
  assembly:
    execute:
      - invoke:
          target-url: 'https://am-utilityapi.eu-gb.mybluemix.net$(request.path)$(request.search)'
  phase: realized
